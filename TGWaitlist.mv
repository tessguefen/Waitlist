<MvFUNCTION NAME = "Module_Description" PARAMETERS = "module var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.module:code"		VALUE = "TGWaitlist">
	<MvASSIGN NAME = "l.module:name"		VALUE = "Waitlist">
	<MvASSIGN NAME = "l.module:provider"	VALUE = "Tess Guefen">
	<MvASSIGN NAME = "l.module:version"		VALUE = "1.007">
	<MvASSIGN NAME = "l.module:api_ver"		VALUE = "9.12">
	<MvASSIGN NAME = "l.module:description"	VALUE = "Make it easy for customers to quickly sign up for email alerts on out of stock products. When products are back in stock, emails will be automatically sent out by a Scheduled Task. This works on Products & Variants.">
	<MvASSIGN NAME = "l.module:features"	VALUE = "data_store,not_prod,system,vis_system,json,clientside,scheduledtask,component,json_api">
</MvFUNCTION>

<MvCOMMENT>
| ============================
| Install, Upgrade, Uninstall.
| ============================
</MvCOMMENT>

<MvFUNCTION NAME = "Module_Install_Store" PARAMETERS = "module var" STANDARDOUTPUTLEVEL = "" ERROROUTPUTLEVEL = "">

	<MvASSIGN NAME = "l.waitlist_email_page:admin"		VALUE = "0">
	<MvASSIGN NAME = "l.waitlist_email_page:code"		VALUE = "WaitlistEmailTemplate">
	<MvASSIGN NAME = "l.waitlist_email_page:name"		VALUE = "Waitlist Email Template">
	<MvASSIGN NAME = "l.waitlist_email_page:ui_id"		VALUE = "0">
	<MvASSIGN NAME = "l.waitlist_email_page:settings"	VALUE = "">
	<MvCAPTURE VARIABLE = "l.waitlist_email_page:data">
		<MvINCLUDE FILE = "templates/WaitlistEmailTemplate.mvt" INTERPRET = "OFF">
	</MvCAPTURE>

	<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_MGR ].TemplateManager_Create_Page_LowLevel( l.waitlist_email_page, l.waitlist_email_page:data ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'TGWaitlist-INSTALL-1000:', 'An error occured while creating the page WaitlistEmailTemplate' ) }">
	</MvIF>

	<MvASSIGN NAME = "l.success" VALUE = "{ [ g.Module_Feature_TUI_MGR ].TemplateManager_Page_Assign_Item( l.waitlist_email_page, 'store' ) }">
	<MvASSIGN NAME = "l.success" VALUE = "{ [ g.Module_Feature_TUI_MGR ].TemplateManager_Page_Assign_Item( l.waitlist_email_page, 'urls' ) }">

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].StoreKey_Insert( 'TGWaitlist', 1 ) }">
		<MvIF EXPR = "{ [ g.Module_Feature_TUI_DB ].Page_Load_Code( 'WaitlistEmailTemplate', l.waitlist_email_page ) }">
			<MvASSIGN NAME = "l.success" VALUE = "{ [ g.Module_Feature_TUI_MGR ].TemplateManager_Delete_Page( l.waitlist_email_page ) }">
		</MvIF>
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'TGWaitlist-INSTALL-2000:', 'An error occured while creating the storekey, TGWaitlist. Please make sure this does not already exsist.' ) }">
	</MvIF>

	<MvCOMMENT>
	|
	|	Table Structure
	|	sXX_TGWaitlist
	|		id
	|		time_added
	|		product_id
	|		variant_id
	|		email
	|		cust_id
	|
	</MvCOMMENT>

	<MvQUERY	NAME	= "Merchant"
				QUERY	= "{ 'CREATE TABLE ' $ g.Store_Table_Prefix $ 'TGWaitlist
								(
									id				' $ [ g.Module_Library_Native_DBAPI ].DB_Type_NUMBER( 0, 0 )	$ ',
									time_added		' $ [ g.Module_Library_Native_DBAPI ].DB_Type_NUMBER( 0, 0 )	$ ',
									product_id		' $ [ g.Module_Library_Native_DBAPI ].DB_Type_NUMBER( 0, 0 )	$ ',
									variant_id		' $ [ g.Module_Library_Native_DBAPI ].DB_Type_NUMBER( 0, 0 )	$ ',
				 					email			' $ [ g.Module_Library_Native_DBAPI ].DB_Type_CHAR( 255 )		$ ',
				 					cust_id			' $ [ g.Module_Library_Native_DBAPI ].DB_Type_NUMBER( 0, 0 )	$ '
								)' }">
	<MvQUERY	NAME	= "Merchant"
				QUERY	= "{ 'CREATE TABLE ' $ g.Store_Table_Prefix $ 'TGWaitlist_Sent
								(
									id				' $ [ g.Module_Library_Native_DBAPI ].DB_Type_NUMBER( 0, 0 )	$ ',
									time_added		' $ [ g.Module_Library_Native_DBAPI ].DB_Type_NUMBER( 0, 0 )	$ ',
									time_sent		' $ [ g.Module_Library_Native_DBAPI ].DB_Type_NUMBER( 0, 0 )	$ ',
									product_id		' $ [ g.Module_Library_Native_DBAPI ].DB_Type_NUMBER( 0, 0 )	$ ',
									variant_id		' $ [ g.Module_Library_Native_DBAPI ].DB_Type_NUMBER( 0, 0 )	$ ',
				 					email			' $ [ g.Module_Library_Native_DBAPI ].DB_Type_CHAR( 255 )		$ ',
				 					cust_id			' $ [ g.Module_Library_Native_DBAPI ].DB_Type_NUMBER( 0, 0 )	$ '
								)' }">
	<MvIF EXPR = "{ g.MvQUERY_Error }">
		<MvIF EXPR = "{ [ g.Module_Feature_TUI_DB ].Page_Load_Code( 'WaitlistEmailTemplate', l.waitlist_email_page ) }">
			<MvASSIGN NAME = "l.success" VALUE = "{ [ g.Module_Feature_TUI_MGR ].TemplateManager_Delete_Page( l.waitlist_email_page ) }">
		</MvIF>
		<MvASSIGN NAME = "l.success" VALUE = "{ [ g.Module_Library_DB ].StoreKey_Delete( 'TGWaitlist' ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'TGWaitlist-INSTALL-3000:', 'An error occured while creating the table ' $  g.Store_Table_Prefix $ 'TGWaitlist or ' $ g.Store_Table_Prefix $ 'TGWaitlist_Sent. Please make sure these tables were not already created.' ) }">
	</MvIF>
	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "Module_Upgrade_Store" PARAMETERS = "module var, version" STANDARDOUTPUTLEVEL = "" ERROROUTPUTLEVEL = "">
	<MvIF EXPR = "{ l.version LT 1.007 }">
		<MvQUERY	NAME	= "Merchant"
				QUERY	= "{ 'CREATE TABLE ' $ g.Store_Table_Prefix $ 'TGWaitlist_Sent
								(
									id				' $ [ g.Module_Library_Native_DBAPI ].DB_Type_NUMBER( 0, 0 )	$ ',
									time_added		' $ [ g.Module_Library_Native_DBAPI ].DB_Type_NUMBER( 0, 0 )	$ ',
									time_sent		' $ [ g.Module_Library_Native_DBAPI ].DB_Type_NUMBER( 0, 0 )	$ ',
									product_id		' $ [ g.Module_Library_Native_DBAPI ].DB_Type_NUMBER( 0, 0 )	$ ',
									variant_id		' $ [ g.Module_Library_Native_DBAPI ].DB_Type_NUMBER( 0, 0 )	$ ',
				 					email			' $ [ g.Module_Library_Native_DBAPI ].DB_Type_CHAR( 255 )		$ ',
				 					cust_id			' $ [ g.Module_Library_Native_DBAPI ].DB_Type_NUMBER( 0, 0 )	$ '
								)' }">
		<MvIF EXPR = "{ g.MvQUERY_Error }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'TGWaitlist-UPDATE-1000:', 'An error occured while creating the table ' $  g.Store_Table_Prefix $ 'TGWaitlist_Sent. Please make sure this table was not already created.' ) }">
		</MvIF>
	</MvIF>
	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "Module_Uninstall_Store" PARAMETERS = "module var" STANDARDOUTPUTLEVEL = "" ERROROUTPUTLEVEL = "">
	<MvIF EXPR = "{ [ g.Module_Feature_TUI_DB ].Page_Load_Code( 'WaitlistEmailTemplate', l.waitlist_email_page ) }">
		<MvASSIGN NAME = "l.success" VALUE = "{ [ g.Module_Feature_TUI_MGR ].TemplateManager_Delete_Page( l.waitlist_email_page ) }">
	</MvIF>
	<MvASSIGN NAME = "l.success" VALUE = "{ [ g.Module_Library_DB ].StoreKey_Delete( 'TGWaitlist' ) }">
	<MvQUERY NAME = "Merchant" QUERY = "{ 'DROP TABLE ' $  g.Store_Table_Prefix $ 'TGWaitlist' }">
	<MvQUERY NAME = "Merchant" QUERY = "{ 'DROP TABLE ' $  g.Store_Table_Prefix $ 'TGWaitlist_Sent' }">
	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvCOMMENT>
| ============================
| not_prod
|	Module_Notify_Product_Delete( module var, product var )
|	Module_Notify_Product_Insert( module var, product var )
|	Module_Notify_Product_Update( module var, product var )
| ============================
</MvCOMMENT>

<MvFUNCTION NAME = "Module_Notify_Product_Delete" PARAMETERS = "module var, product var" STANDARDOUTPUTLEVEL = "" ERROROUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.success" VALUE = "{ Waitlist_Delete_Product( l.product:id ) }">
	<MvASSIGN NAME = "l.success" VALUE = "{ Waitlist_Sent_Delete_Product( l.product:id ) }">
	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "Module_Notify_Product_Insert" PARAMETERS = "module var, product var" STANDARDOUTPUTLEVEL = "" ERROROUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "Module_Notify_Product_Update" PARAMETERS = "module var, product var" STANDARDOUTPUTLEVEL = "" ERROROUTPUTLEVEL = "">
	<MvCOMMENT>
	|
	|	9.7 Feature -- Trigger waitlist sched. task later.
	|
	</MvCOMMENT>
	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>




<MvCOMMENT>
| ====
| SystemModule_Action, SystemModule_Screen, SystemModule_UIException
| ====
</MvCOMMENT>

<MvFUNCTION NAME = "SystemModule_Action" PARAMETERS = "module var, action" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ l.action EQ 'WaitlistAdd' }">
		<MvASSIGN NAME = "l.success" VALUE = "{ Waitlist_Form_Add( g.Waitlist_Product_Code, g.Waitlist_Variant_ID, g.Waitlist_Email ) }">
	</MvIF>
	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "SystemModule_Screen" PARAMETERS = "module var, screen" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "SystemModule_UIException" PARAMETERS = "module var, exception" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvCOMMENT>
| ====
| Module_System_Validate, Module_System_Content, Module_System_Head, Module_System_Tabs
| ====
</MvCOMMENT>

<MvFUNCTION NAME = "Module_System_Validate" PARAMETERS = "module var" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "Module_System_Content" PARAMETERS = "module var, tab, load_fields" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvIF EXPR = "{ l.tab EQ 'TGWaitlist'}">
		<MvEVAL EXPR = "{ [ g.Module_Admin ].Element_MMBatchList_HTML() }">
		<div id="jsWaitlist_Batchlist"></div>
	<MvELSEIF EXPR = "{ l.tab EQ 'TGWaitlist_Sent' }">
		<MvEVAL EXPR = "{ [ g.Module_Admin ].Element_MMBatchList_HTML() }">
		<div id="jsWaitlist_Sent_Batchlist"></div>
	</MvIF>
	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "Module_System_Head" PARAMETERS = "module var, tab" STANDARDOUTPUTLEVEL = "html, text, compresswhitespace">
	<MvIF EXPR = "{ l.tab EQ 'TGWaitlist'}">
		<MvEVAL EXPR = "{ [ g.Module_Admin ].Element_MMBatchList_JavaScript() }">
		<MvEVAL EXPR = "{ [ g.Module_Admin ].Element_MMBatchList_CSS() }">
		<script language="JavaScript" src="{ g.clientside_url $ 'Module_Code=' $ encodeattribute( l.module:code ) $ '&Filename=Waitlist_Functions.js' }"></script>
		<script language="JavaScript" src="{ g.clientside_url $ 'Module_Code=' $ encodeattribute( l.module:code ) $ '&Filename=Waitlist_Batchlist.js' }"></script>
		<script language="JavaScript">
			MMScreen_LoadFinished( function() { new Waitlist_Batchlist(); } );
		</script>
	<MvELSEIF EXPR = "{ l.tab EQ 'TGWaitlist_Sent'}">
		<MvEVAL EXPR = "{ [ g.Module_Admin ].Element_MMBatchList_JavaScript() }">
		<MvEVAL EXPR = "{ [ g.Module_Admin ].Element_MMBatchList_CSS() }">
		<script language="JavaScript" src="{ g.clientside_url $ 'Module_Code=' $ encodeattribute( l.module:code ) $ '&Filename=Waitlist_Sent_Functions.js' }"></script>
		<script language="JavaScript" src="{ g.clientside_url $ 'Module_Code=' $ encodeattribute( l.module:code ) $ '&Filename=Waitlist_Sent_Batchlist.js' }"></script>
		<script language="JavaScript">
			MMScreen_LoadFinished( function() { new Waitlist_Sent_Batchlist(); } );
		</script>
	</MvIF>
	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "Module_System_Tabs" PARAMETERS = "module var" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = "TGWaitlist:Waitlist,TGWaitlist_Sent:Waitlist - Sent">
</MvFUNCTION>

<MvFUNCTION NAME = "Module_System_Update" PARAMETERS = "module var" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvCOMMENT>
| ============================
| JavaScript Object Notation Feature (json)
| ============================
</MvCOMMENT>

<MvFUNCTION NAME = "Module_JSON" PARAMETERS = "module var" STANDARDOUTPUTLEVEL = "" ERROROUTPUTLEVEL = "">
	<MvIF EXPR = "{ g.Module_Function EQ 'Waitlist_API' }">
		<MvFUNCTIONRETURN VALUE = "{ Waitlist_API() }">
	</MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">
		<MvFUNCTIONRETURN>
	</MvIF>
	<MvIF EXPR = "{ g.Module_Function EQ 'Waitlist_All_Load_Query' }">
		<MvFUNCTIONRETURN VALUE = "{ JSON_Waitlist_All_Load_Query( l.module ) }">
	</MvIF>
	<MvIF EXPR = "{ g.Module_Function EQ 'Waitlist_Delete' }">
		<MvASSIGN NAME = "g.Waitlist_ID" VALUE = "{ [ g.Module_JSON ].JSON_Decode( g.Waitlist_ID ) }">
		<MvFUNCTIONRETURN VALUE = "{ JSON_Waitlist_Delete( g.Waitlist_ID ) }">
	</MvIF>
	<MvIF EXPR = "{ g.Module_Function EQ 'Waitlist_Trigger_Emails' }">
		<MvASSIGN NAME = "g.Waitlists" VALUE = "{ [ g.Module_JSON ].JSON_Decode( g.Waitlists ) }">
		<MvFUNCTIONRETURN VALUE = "{ JSON_Waitlist_Trigger_Emails( g.Waitlists ) }">
	</MvIF>
	<MvIF EXPR = "{ g.Module_Function EQ 'Waitlist_Sent_All_Load_Query' }">
		<MvFUNCTIONRETURN VALUE = "{ JSON_Waitlist_Sent_All_Load_Query( l.module ) }">
	</MvIF>
	<MvIF EXPR = "{ g.Module_Function EQ 'Waitlist_Sent_Delete' }">
		<MvASSIGN NAME = "g.Waitlist_ID" VALUE = "{ [ g.Module_JSON ].JSON_Decode( g.Waitlist_ID ) }">
		<MvFUNCTIONRETURN VALUE = "{ JSON_Waitlist_Sent_Delete( g.Waitlist_ID ) }">
	</MvIF>
</MvFUNCTION>


<MvCOMMENT>
| ============================
| Client Side Feature (clienside)
| ============================
</MvCOMMENT>
<MvFUNCTION NAME = "Module_Clientside" PARAMETERS = "module var" STANDARDOUTPUTLEVEL = "text,compresswhitespace" ERROROUTPUTLEVEL = "">
	<MvIF EXPR = "{ g.Filename EQ 'Waitlist_Batchlist.js' }">
		<MvEVAL EXPR = "{ [ g.Module_Clientside ].Module_Content_Type( l.module, 'text/javascript' ) }">
		<MvINCLUDE FILE = "js/Waitlist_Batchlist.js">
	</MvIF>
	<MvIF EXPR = "{ g.Filename EQ 'Waitlist_Functions.js' }">
		<MvEVAL EXPR = "{ [ g.Module_Clientside ].Module_Content_Type( l.module, 'text/javascript' ) }">
		<MvINCLUDE FILE = "js/Waitlist_Functions.js">
	</MvIF>
	<MvIF EXPR = "{ g.Filename EQ 'Waitlist_Sent_Batchlist.js' }">
		<MvEVAL EXPR = "{ [ g.Module_Clientside ].Module_Content_Type( l.module, 'text/javascript' ) }">
		<MvINCLUDE FILE = "js/Waitlist_Sent_Batchlist.js">
	</MvIF>
	<MvIF EXPR = "{ g.Filename EQ 'Waitlist_Sent_Functions.js' }">
		<MvEVAL EXPR = "{ [ g.Module_Clientside ].Module_Content_Type( l.module, 'text/javascript' ) }">
		<MvINCLUDE FILE = "js/Waitlist_Sent_Functions.js">
	</MvIF>
</MvFUNCTION>

<MvCOMMENT>
| ============================
| Scheduled Task (scheduledtask)
| ============================
</MvCOMMENT>

<MvFUNCTION NAME = "ScheduledTaskModule_Capabilities" PARAMETERS = "module var, capabilities var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.capabilities:provision_settings" VALUE = 0>
	<MvASSIGN NAME = "l.capabilities:provision" VALUE = 0>
</MvFUNCTION>

<MvFUNCTION NAME = "ScheduledTaskModule_Operations" PARAMETERS = "module var, operations var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.operations" INDEX = "1" MEMBER = "code"		VALUE = "waitlist_trigger">
	<MvASSIGN NAME = "l.operations" INDEX = "1" MEMBER = "descrip"	VALUE = "Trigger Waitlist Emails">
	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "ScheduledTaskModule_Fields" PARAMETERS = "module var, task var" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = "">
</MvFUNCTION>

<MvFUNCTION NAME = "ScheduledTaskModule_Invalid" PARAMETERS = "module var, field_id" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = 0>
</MvFUNCTION>

<MvFUNCTION NAME = "ScheduledTaskModule_Prompt" PARAMETERS = "module var, field_id" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = "">
</MvFUNCTION>

<MvFUNCTION NAME = "ScheduledTaskModule_Field" PARAMETERS = "module var, field_id" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
</MvFUNCTION>

<MvFUNCTION NAME = "ScheduledTaskModule_Validate" PARAMETERS = "module var, task var" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "ScheduledTaskModule_Update" PARAMETERS = "module var, task var" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "ScheduledTaskModule_Delete" PARAMETERS = "module var, task var" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "ScheduledTaskModule_Execute" PARAMETERS = "module var, task var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ l.task:operation EQ 'waitlist_trigger' }">
		<MvFUNCTIONRETURN VALUE = "{ Waitlists_Trigger_All() }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'TGWaitlist-MOD-1000', 'Unsupported operation' ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "ScheduledTaskModule_Provision_Settings" PARAMETERS = "module var, task var, provide_xml var" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvCOMMENT>
| ============================
|	COMPONENT
| ============================
</MvCOMMENT>

<MvFUNCTION NAME = "ComponentModule_Initialize" PARAMETERS = "module var, item, all_settings var, settings var" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentModule_Render_End" PARAMETERS = "module var, item, all_settings var, settings var, param" STANDARDOUTPUTLEVEL = "">
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentModule_Tabs" PARAMETERS = "module var, item, settings var" STANDARDOUTPUTLEVEL = "">
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentModule_Validate" PARAMETERS = "module var, item, field_prefix, fields var" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentModule_Update" PARAMETERS = "module var, item, field_prefix, fields var, settings var" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentModule_Content" PARAMETERS = "module var, item, tab, load_fields, field_prefix, fields var, settings var" STANDARDOUTPUTLEVEL = "">
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentModule_Defaults" PARAMETERS = "module var, settings var" STANDARDOUTPUTLEVEL = "">
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentModule_Page_Assign" PARAMETERS = "module var, page var, item, settings var" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentModule_Page_Unassign" PARAMETERS = "module var, page var, item, settings var" STANDARDOUTPUTLEVEL = "">
	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "ComponentModule_Prerender" PARAMETERS = "module var, item, all_settings var, settings var, param" STANDARDOUTPUTLEVEL = "">
</MVFUNCTION>

<MvFUNCTION NAME = "ComponentModule_Render_Start" PARAMETERS = "module var, item, all_settings var, settings var, param" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT Parse_Function_Parameters( l.param, l.function_name, l.parameters, l.parameter_count ) }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvIF EXPR = "{ l.function_name EQ 'waitlist_api_url' }">
		<MvIF EXPR = "{ l.parameter_count EQ 1 }">
			<MvIF EXPR = "{ NOT Is_Variable( l.parameters[1] ) }">
				<MvFUNCTIONRETURN VALUE = "{ Parameter_Error( l.param, 'The first parameter must be a variable' ) }">
			</MvIF>
			<MvIF EXPR = "{ NOT Waitlist_API_URL( l.module, l.return) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>
			<MvASSIGN NAME = "{ l.parameters[1] }" VALUE = "{ l.return }">
		</MvIF>
		<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvIF EXPR = "{ l.function_name EQ 'currentwaitlistcount' }">
		<MvIF EXPR = "{ l.parameter_count EQ 3 }">
			<MvIF EXPR = "{ NOT Is_Variable( l.parameters[3] ) }">
				<MvFUNCTIONRETURN VALUE = "{ Parameter_Error( l.param, 'The third parameter must be a variable' ) }">
			</MvIF>
			<MvIF EXPR = "{ NOT CurrentWaitlistCount( l.parameters[1], l.parameters[2], l.return) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>
			<MvASSIGN NAME = "{ l.parameters[3] }" VALUE = "{ l.return }">
		</MvIF>
		<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvIF EXPR = "{ l.function_name EQ 'waitlistxcustomer_load' }">
		<MvIF EXPR = "{ l.parameter_count EQ 2 }">
			<MvIF EXPR = "{ NOT Is_Variable( l.parameters[2] ) }">
				<MvFUNCTIONRETURN VALUE = "{ Parameter_Error( l.param, 'The Second parameter must be a variable' ) }">
			</MvIF>
			<MvIF EXPR = "{ NOT WaitlistXCustomer_Load( l.parameters[1], l.return ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>
			<MvASSIGN NAME = "{ l.parameters[2] }" VALUE = "{ l.return }">
		</MvIF>
		<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvIF EXPR = "{ l.function_name EQ 'waitlistxemail_load' }">
		<MvIF EXPR = "{ l.parameter_count EQ 2 }">
			<MvIF EXPR = "{ NOT Is_Variable( l.parameters[2] ) }">
				<MvFUNCTIONRETURN VALUE = "{ Parameter_Error( l.param, 'The Second parameter must be a variable' ) }">
			</MvIF>
			<MvIF EXPR = "{ NOT WaitlistXEmail_Load( l.parameters[1], l.return ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>
			<MvASSIGN NAME = "{ l.parameters[2] }" VALUE = "{ l.return }">
		</MvIF>
		<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

</MvFUNCTION>

<MvFUNCTION NAME = "ComponentModule_Render_Head" PARAMETERS = "module var, item, all_settings var, settings var" STANDARDOUTPUTLEVEL = "">
</MvFUNCTION>

<MvCOMMENT>
| ====================================================================================
|	JSON_API
| ====================================================================================
</MvCOMMENT>

<MvFUNCTION NAME = "Module_JSON_API" PARAMETERS = "module var, function" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.void" VALUE = "{ miva_output_header( 'Content-Type', 'application/json' ) }" >
	<MvIF EXPR = "{ l.function EQ 'Waitlist_Load_Query' }">				<MvFUNCTIONRETURN VALUE = "{ JSON_API_Waitlist_Load_Query( l.module ) }">
	<MvELSEIF EXPR = "{ l.function EQ 'Waitlist_Trigger_All' }">		<MvFUNCTIONRETURN VALUE = "{ JSON_API_Waitlist_Trigger_All( l.module ) }">
	<MvELSEIF EXPR = "{ l.function EQ 'Waitlist_Load_Email' }">			<MvFUNCTIONRETURN VALUE = "{ JSON_API_Waitlist_Load_Email( l.module ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'TGWAITLIST-ERROR-0001', 'Invalid function.' ) }">
</MvFUNCTION>

<MvCOMMENT>
|
|	Custom Functions
|		Waitlist_Read( waitlist var )
|		Waitlist_Load_ID( waitlist_id, waitlist var )
|		Waitlist_Add_Lowlevel( timestamp, product_id, variant_id, email, cust_id )
|		WaitlistXCheck( product_id, variant_id, email )
|		Waitlist_Add( product_id, variant_id, email )
|		Waitlist_Delete( id )
|		Waitlist_Trigger_Email( waitlist )
|		Waitlist_Trigger_EmailsXProduct( product_id, variant_id )
|		Waitlist_Trigger_Email_Lowlevel( waitlist var )
|		Waitlist_Product_Check( product_id, variant_id, waitlist var )
|		Read_Variant_Options( options var )
|		Waitlist_Delete_Product( product_id )
|		Waitlist_Form_Add( product_code, variant_id, email )
|		Waitlists_Trigger_All()
|
|		Waitlist_Sent_Read( waitlist var )
|		Waitlist_Sent_Add_Lowlevel( waitlist var )
|		Waitlist_Sent_Add( waitlist var )
|		Waitlist_Sent_Delete( waitlist_id )
|		Waitlist_Sent_Delete_Product( product_id )
|		
|
|	Waitlist API
|		Waitlist_API()
|
|	Specific Functions called via item
|		Waitlist_API_URL( module var, return var )
|		CurrentWaitlistCount( product_id, variant_id, return var )
|		WaitlistXCustomer_Load( cust_id, return var )
|		WaitlistXEmail_Load( email, return var )
|
|	JSON/ Batchlist Functions
|		JSON_Waitlist_All_Load_Query( module var )
|		JSON_Waitlist_Delete( id )
|		JSON_Waitlist_Trigger_Emails( waitlists )
|		JSON_Waitlist_Sent_All_Load_Query( module var )
|		JSON_Waitlist_Sent_Delete( id )
|
|	JSON API
|		JSON_API_Waitlist_Load_Query( module var )
|		JSON_API_Waitlist_Trigger_All( module var )
|		JSON_API_Waitlist_Load_Email( module var )
|
|	Component Helpers
|		Parse_Function_Parameters( string, function_name var, parameters var, parameter_count var )
|		Parameter_Error( param, message )
|		Is_Variable( variable var )
|
</MvCOMMENT>

<MvFUNCTION NAME = "Waitlist_Read" PARAMETERS = "waitlist var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.waitlist" MEMBER = "id"				VALUE = "{ TGWaitlist.d.id }">
	<MvASSIGN NAME = "l.waitlist" MEMBER = "time_added"		VALUE = "{ TGWaitlist.d.time_added }">
	<MvASSIGN NAME = "l.waitlist" MEMBER = "product_id"		VALUE = "{ TGWaitlist.d.product_id }">
	<MvASSIGN NAME = "l.waitlist" MEMBER = "variant_id"		VALUE = "{ TGWaitlist.d.variant_id }">
	<MvASSIGN NAME = "l.waitlist" MEMBER = "email"			VALUE = "{ TGWaitlist.d.email }">
	<MvASSIGN NAME = "l.waitlist" MEMBER = "cust_id" 		VALUE = "{ TGWaitlist.d.cust_id }">
</MvFUNCTION>

<MvFUNCTION NAME = "Waitlist_Load_ID" PARAMETERS = "waitlist_id, waitlist var" STANDARDOUTPUTLEVEL = ""  ERROROUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.waitlist_id" VALUE = "{ trim( l.waitlist_id ) }">

	<MvIF EXPR = "{ ( l.waitlist_id EQ 0 ) OR ( ISNULL l.waitlist_id ) }">
		<MvASSIGN NAME = "g.Waitlist_Error" VALUE = "Missing Waitlist ID.">
		<MvFUNCTIONRETURN VALUE = 0 />
	</MvIF>


	<MvOPENVIEW NAME	= "Merchant"
				VIEW 	= "TGWaitlistLoad"
				QUERY 	= "{ 'SELECT * FROM ' $ g.Store_Table_Prefix $ 'TGWaitlist WHERE id = ? ' }"
				FIELDS	= "l.waitlist_id">

	<MvIF EXPR = "{ g.MvOPENVIEW_Error }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'TGWaitlist-CHECK-1001:', 'An error occured while checking a record.' ) }">
	</MvIF>

	<MvASSIGN NAME = "l.waitlist" MEMBER = "id"				VALUE = "{ TGWaitlistLoad.d.id }">
	<MvASSIGN NAME = "l.waitlist" MEMBER = "time_added"		VALUE = "{ TGWaitlistLoad.d.time_added }">
	<MvASSIGN NAME = "l.waitlist" MEMBER = "product_id"		VALUE = "{ TGWaitlistLoad.d.product_id }">
	<MvASSIGN NAME = "l.waitlist" MEMBER = "variant_id"		VALUE = "{ TGWaitlistLoad.d.variant_id }">
	<MvASSIGN NAME = "l.waitlist" MEMBER = "email"			VALUE = "{ TGWaitlistLoad.d.email }">
	<MvASSIGN NAME = "l.waitlist" MEMBER = "cust_id" 		VALUE = "{ TGWaitlistLoad.d.cust_id }">

	<MvCLOSEVIEW NAME = "Merchant" VIEW = "TGWaitlistLoad">

	<MvIF EXPR = "{ l.waitlist:id GT 0 }">
		<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 0 />
</MvFUNCTION>

<MvFUNCTION NAME = "Waitlist_Add_Lowlevel" PARAMETERS = "timestamp, product_id, variant_id, email, cust_id" STANDARDOUTPUTLEVEL = ""  ERROROUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.timestamp"		VALUE = "{ int( l.timestamp ) }">
	<MvASSIGN NAME = "l.product_id"		VALUE = "{ int( l.product_id ) }">
	<MvASSIGN NAME = "l.variant_id"		VALUE = "{ int( l.variant_id ) }">
	<MvASSIGN NAME = "l.email"			VALUE = "{ trim( l.email ) }">
	<MvASSIGN NAME = "l.cust_id"		VALUE = "{ int( l.cust_id ) }">

	<MvIF EXPR = "{ ( ISNULL l.timestamp ) }">
		<MvASSIGN NAME = "g.Waitlist_Error" VALUE = "Missing Timestamp.">
		<MvFUNCTIONRETURN VALUE = 0 />
	</MvIF>

	<MvIF EXPR = "{ ( ISNULL l.product_id ) }">
		<MvASSIGN NAME = "g.Waitlist_Error" VALUE = "Missing Product ID.">
		<MvFUNCTIONRETURN VALUE = 0 />
	</MvIF>

	<MvIF EXPR = "{ ( ISNULL l.email ) }">
		<MvASSIGN NAME = "g.Waitlist_Error" VALUE = "Missing Email.">
		<MvFUNCTIONRETURN VALUE = 0 />
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Product_Load_ID( l.product_id, l.loaded_product ) }">
		<MvASSIGN NAME = "g.Waitlist_Error" VALUE = "Product ID does not exists.">
		<MvFUNCTIONRETURN VALUE = 0 />
	</MvIF>

	<MvIF EXPR = "{ ( l.variant_id GT 0 )  AND ( NOT [ g.Module_Library_DB ].ProductVariantList_Load_Variant( l.product_id, l.variant_id, l.product_variants ) ) }">
		<MvASSIGN NAME = "g.Waitlist_Error" VALUE = "Product Variant does not exists.">
		<MvFUNCTIONRETURN VALUE = 0 />
	</MvIF>

	<MvIF EXPR = "{ WaitlistXCheck( l.product_id, l.variant_id, l.email, l.data ) }">
		<MvASSIGN NAME = "g.Waitlist_Error" VALUE = "{ l.email $ ' is already on the Waitlist for this product.' }">
		<MvFUNCTIONRETURN VALUE = 0 />
	</MvIF>

	<MvIF EXPR = "{ ISNULL l.variant_id }">
		<MvASSIGN NAME = "l.variant_id" VALUE = "0" />
	</MvIF>
	<MvIF EXPR = "{ ISNULL l.cust_id }">
		<MvASSIGN NAME = "l.cust_id" VALUE = "0" />
	</MvIF>

	<MvASSIGN NAME = "l.id" VALUE = "{ [ g.Module_Library_DB ].StoreKey_Generate( 'TGWaitlist' ) }">

	<MvQUERY	NAME = "Merchant"
				QUERY = "{ 'INSERT INTO ' $ g.Store_Table_Prefix $ 'TGWaitlist
							( id, time_added, product_id, variant_id, email, cust_id )
							VALUES
							( ?, ?, ?, ?, ?, ?)' }"
				FIELDS = "l.id, l.timestamp, l.product_id, l.variant_id, l.email, l.cust_id">

	<MvIF EXPR = "{ g.MvQUERY_Error }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'TGWaitlist-INSERT-1000:', 'An error occured while inserting a new record.' ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1 />
</MvFUNCTION>

<MvFUNCTION NAME = "WaitlistXCheck" PARAMETERS = "product_id, variant_id, email, data var" STANDARDOUTPUTLEVEL = ""  ERROROUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.product_id"		VALUE = "{ int( l.product_id ) }">
	<MvASSIGN NAME = "l.variant_id"		VALUE = "{ int( l.variant_id ) }">
	<MvASSIGN NAME = "l.email"			VALUE = "{ trim( l.email ) }">
	<MvASSIGN NAME = "l.cust_id"		VALUE = "{ int( l.cust_id ) }">

	<MvIF EXPR = "{ ISNULL l.variant_id }">
		<MvASSIGN NAME = "l.variant_id" VALUE = "0" />
	</MvIF>
	<MvIF EXPR = "{ ISNULL l.cust_id }">
		<MvASSIGN NAME = "l.cust_id" VALUE = "0" />
	</MvIF>

	<MvOPENVIEW NAME	= "Merchant"
				VIEW 	= "TGWaitlist"
				QUERY 	= "{ 'SELECT * FROM ' $ g.Store_Table_Prefix $ 'TGWaitlist WHERE product_id = ? AND variant_id = ? AND email = ?' }"
				FIELDS	= "l.product_id, l.variant_id, l.email">

	<MvIF EXPR = "{ g.MvOPENVIEW_Error }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'TGWaitlist-CHECK-1000:', 'An error occured while checking a record.' ) }">
	</MvIF>

	<MvEVAL EXPR = "{ Waitlist_Read( l.data ) }">

	<MvCLOSEVIEW NAME = "Merchant" VIEW = "TGWaitlist">

	<MvIF EXPR = "{ l.data:id GT 0 }">
		<MvFUNCTIONRETURN VALUE = 1>
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 0>
</MvFUNCTION>

<MvFUNCTION NAME = "Waitlist_Add" PARAMETERS = "product_id, variant_id, email" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT Waitlist_Add_Lowlevel( s.dyn_time_t, l.product_id, l.variant_id, l.email, g.Customer:id ) }">
		<MvFUNCTIONRETURN VALUE = 0 />
	</MvIF>
	<MvFUNCTIONRETURN VALUE = 1 />
</MvFUNCTION>

<MvFUNCTION NAME = "Waitlist_Delete" PARAMETERS = "waitlist_id" STANDARDOUTPUTLEVEL = ""  ERROROUTPUTLEVEL = "">
	<MvQUERY NAME 	= "Merchant"
			 QUERY 	= "{ 'DELETE FROM ' $ g.Store_Table_Prefix $ 'TGWaitlist WHERE id = ?' }"
			 FIELDS = "l.waitlist_id">
	<MvIF EXPR = "{ g.MvQUERY_Error }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'TGWaitlist-DELETE-1000:', g.MvQUERY_Error ) }">
	</MvIF>
	
	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "Waitlist_Trigger_Email" PARAMETERS = "waitlist_id" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT Waitlist_Load_ID( l.waitlist_id, l.waitlist ) }">
		<MvFUNCTIONRETURN VALUE = 0 />
	</MvIF>

	<MvIF EXPR = "{ NOT Waitlist_Product_Check( l.waitlist:product_id, l.waitlist:variant_id, l.waitlist) }">
		<MvFUNCTIONRETURN VALUE = 0 />
	</MvIF>

	<MvDO FILE = "{ g.Module_Library_Utilities }" NAME = "l.waitlist:formatted_date" VALUE = "{ Format_Date( l.waitlist:time_added, s.miva_language ) }">

	<MvFUNCTIONRETURN VALUE = "{ Waitlist_Trigger_Email_Lowlevel( l.waitlist ) }" />
</MvFUNCTION>

<MvFUNCTION NAME = "Waitlist_Trigger_EmailsXProduct" PARAMETERS = "product_id, variant_id" STANDARDOUTPUTLEVEL = ""  ERROROUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT Waitlist_Product_Check( l.product_id, l.variant_id, l.waitlist) }">
		<MvFUNCTIONRETURN VALUE = 0 />
	</MvIF>

	<MvOPENVIEW NAME	= "Merchant"
				VIEW 	= "TGWaitlist"
				QUERY 	= "{ 'SELECT * FROM ' $ g.Store_Table_Prefix $ 'TGWaitlist WHERE product_id = ? AND variant_id = ?' }"
				FIELDS	= "l.waitlist:product_id, l.waitlist:variant_id">

	<MvIF EXPR = "{ g.MvOPENVIEW_Error }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'TGWaitlist-CHECK-1003:', 'An error occured while checking a record.' ) }">
	</MvIF>

	<MvASSIGN NAME = "g.WaitlistCount" VALUE = "0">

	<MvWHILE EXPR = "{ ( NOT TGWaitlist.d.EOF ) AND ( ( g.WaitlistCount EQ 0 ) OR (l.waitlist_num LT ( g.WaitlistCount + 1) ) ) }">

		<MvEVAL EXPR = "{ Waitlist_Read( l.waitlist ) }">

		<MvDO FILE = "{ g.Module_Library_Utilities }" NAME = "l.waitlist:formatted_date" VALUE = "{ Format_Date( l.waitlist:time_added, s.miva_language ) }">
	
		<MvASSIGN NAME = "l.success" VALUE = "{ Waitlist_Trigger_Email_Lowlevel( l.waitlist ) }">

		<MvASSIGN NAME = "l.waitlist_num"	VALUE = "{ l.waitlist_num + 1 }">

		<MvSKIP NAME = "Merchant" VIEW = "TGWaitlist" ROWS = 1>

	</MvWHILE>

	<MvCLOSEVIEW NAME = "Merchant" VIEW = "TGWaitlist">

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "Waitlist_Trigger_Email_Lowlevel" PARAMETERS = "waitlist var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT Waitlist_Load_ID( l.waitlist:id, l.temp ) }">
		<MvFUNCTIONRETURN VALUE = 0 />
	</MvIF>

	<MvDO FILE = "{ g.Module_Feature_TUI_DB }" NAME = "l.loaded" VALUE = "{ Page_Load_Code( 'WaitlistEmailTemplate', l.page) }">

	<MvIF EXPR = "{ [ g.Module_Feature_TUI_DB ].ManagedTemplate_Load_ID( l.page:templ_id, l.waitlist_email_template ) }">

		<MvCOMMENT>
		|
		| Load and initialize items
		|
		</MvCOMMENT>

		<MvASSIGN NAME = "l.item_pos"			VALUE = 1>
		<MvASSIGN NAME = "l.item_count"			VALUE = "{ [ g.Module_Feature_TUI_DB ].ItemModuleList_Load_Page_Render( l.page:id,			l.page:settings:_mgr ) }">
		<MvASSIGN NAME = "l.extension_count"	VALUE = "{ [ g.Module_Feature_TUI_DB ].ItemExtensionModuleList_Load_Page_Render( l.page:id,	l.page:settings:_mgr ) }">

		<MvWHILE EXPR = "{ l.item_pos LE l.item_count }">
			<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_MGR ].TemplateManager_Initialize_Item_LowLevel( l.page:settings, l.page:settings:_mgr:items[ l.item_pos ] ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>

			<MvIF EXPR = "{ g.TemplateManager_Exception }">
				<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'TGWaitlist-ERROR-1000', 'Item \'' $ l.page:settings:_mgr:items[ l.item_pos ]:item_code $ '\' threw exception \'' $ g.TemplateManager_Exception_Code $ '\' during initialization' ) }">
			</MvIF>

			<MvASSIGN NAME = "l.item_pos"	VALUE = "{ l.item_pos + 1 }">
		</MvWHILE>
		<MvASSIGN NAME = "l.all_settings" VALUE = "{ l.page:settings }">
		<MvASSIGN NAME = "l.all_settings:waitlist" VALUE = "{ l.waitlist }">

		<MvCAPTURE VARIABLE = "l.message">
			<MvDO FILE = "{ g.Store_Template_Path $ l.waitlist_email_template:filename }" NAME = "l.success" VALUE = "{ Template_Render( l.settings, l.all_settings ) }">
		</MvCAPTURE>

		<MvASSIGN NAME ="l.email_headers" VALUE = "{ 'Content-Type: text/html; charset=ISO-8859-1' $ asciichar( 13 ) $ asciichar( 10 ) $ asciichar( 13 ) $ asciichar( 10 ) }">

		<MvASSIGN NAME = "l.subject" VALUE = "{ l.waitlist:product:name $ ' is back in stock!' }">
		<MvIF EXPR = "{ g.Email_Subject }">
			<MvASSIGN NAME = "l.subject" VALUE = "{ g.Email_Subject }">
		</MvIF>

		<MvASSIGN NAME = "l.from" VALUE = "{ g.Store:Email }">
		<MvIF EXPR = "{ g.Email_From }">
			<MvASSIGN NAME = "l.from" VALUE = "{ g.Email_From }">
		</MvIF>

		<MvDO FILE = "{ g.Module_Library_Utilities }" NAME = "l.email_sent"  VALUE = "{ SendEmail( l.waitlist:email, l.from, '', l.subject, l.email_headers, l.message) }">
	</MvIF>

	<MvASSIGN NAME = "l.success" VALUE = "{ [ g.Module_Admin ].Admin_Log_Action( 'TGWaitlist-SUCCESS-1000', 'Waitlist Email triggered to' $ l.waitlist:email ) }">

	<MvASSIGN NAME = "l.void" VALUE = "{ Waitlist_Sent_Add( l.waitlist ) }">
	
	<MvIF EXPR = "{ NOT Waitlist_Delete( l.waitlist:id ) }">
		<MvFUNCTIONRETURN VALUE = 0 />
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1 />
</MvFUNCTION>

<MvFUNCTION NAME = "Waitlist_Product_Check" PARAMETERS = "product_id, variant_id, waitlist var" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ ISNULL l.product_id OR l.product_id EQ 0 }">
			<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvIF EXPR = "{ ISNULL l.variant_id }">
		<MvASSIGN NAME = "l.variant_id" VALUE = "0">
	</MvIF>

	<MvASSIGN NAME = "l.waitlist:product_id" VALUE = "{ l.product_id }">
	<MvASSIGN NAME = "l.waitlist:variant_id" VALUE = "{ l.variant_id }">


	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Runtime_Product_Load_ID( l.product_id, l.waitlist:product ) }">
		<MvFUNCTIONRETURN VALUE = 0 />
	</MvIF>

	<MvASSIGN NAME = "l.continue" VALUE = "0" />

	<MvIF EXPR = "{ l.waitlist:variant_id GT 0 }">
		<MvDO FILE = "{ g.Module_Feature_INV_RT }" NAME = "l.continue" VALUE = "{ Inventory_Is_Available_Variant( l.waitlist:product, l.waitlist:variant_id, 1 ) }">
		<MvIF EXPR = "{ [ g.Module_Library_DB ].ProductVariantPartList_Load_Variant( l.waitlist:product:id,  l.waitlist:variant_id, l.waitlist:variants  ) }">
			<MvFOREACH ITERATOR = "l.variant" ARRAY = "l.waitlist:variants">
				<MvDO FILE = "{ g.Module_Library_DB }" NAME = "l.success" VALUE = "{ Runtime_Product_Load_ID( l.variant:part_id, l.variant:product ) }">
			</MvFOREACH>
		</MvIF>
		<MvIF EXPR = "{ [ g.Module_Library_DB ].ProductVariantList_Load_Variant( l.waitlist:product:id, l.waitlist:variant_id, l.waitlist:options ) }">
			<MvASSIGN NAME = "l.success" VALUE = "{ Read_Variant_Options( l.waitlist:options ) }">
		</MvIF>
	<MvELSE>
		<MvDO FILE = "{ g.Module_Feature_INV_RT }" NAME = "l.continue" VALUE = "{ Inventory_Is_Available_LowLevel( l.waitlist:product, 1 ) }">
	</MvIF>

	<MvIF EXPR = "{ [ g.Module_Feature_TUI_DB ].Page_Load_Code( 'WaitlistEmailLogic', l.logic_page) }">
		<MvIF EXPR = "{ [ g.Module_Feature_TUI_DB ].ManagedTemplate_Load_ID( l.logic_page:templ_id, l.waitlist_logic_template ) }">

			<MvCOMMENT>
			|
			| Load and initialize items
			|
			</MvCOMMENT>

			<MvASSIGN NAME = "l.item_pos"			VALUE = 1>
			<MvASSIGN NAME = "l.item_count"			VALUE = "{ [ g.Module_Feature_TUI_DB ].ItemModuleList_Load_Page_Render( l.logic_page:id,			l.logic_page:settings:_mgr ) }">
			<MvASSIGN NAME = "l.extension_count"	VALUE = "{ [ g.Module_Feature_TUI_DB ].ItemExtensionModuleList_Load_Page_Render( l.logic_page:id,	l.logic_page:settings:_mgr ) }">

			<MvWHILE EXPR = "{ l.item_pos LE l.item_count }">
				<MvIF EXPR = "{ NOT [ g.Module_Feature_TUI_MGR ].TemplateManager_Initialize_Item_LowLevel( l.logic_page:settings, l.logic_page:settings:_mgr:items[ l.item_pos ] ) }">
					<MvFUNCTIONRETURN VALUE = 0>
				</MvIF>

				<MvIF EXPR = "{ g.TemplateManager_Exception }">
					<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'TGWaitlist-ERROR-1000', 'Item \'' $ l.logic_page:settings:_mgr:items[ l.item_pos ]:item_code $ '\' threw exception \'' $ g.TemplateManager_Exception_Code $ '\' during initialization' ) }">
				</MvIF>

				<MvASSIGN NAME = "l.item_pos"	VALUE = "{ l.item_pos + 1 }">
			</MvWHILE>

			<MvASSIGN NAME = "l.all_settings" VALUE = "{ l.logic_page:settings }">
			<MvASSIGN NAME = "l.all_settings:waitlist" VALUE = "{ l.waitlist }">
			<MvASSIGN NAME = "l.all_settings:waitlist:original_determination" VALUE = "{ l.continue }">

			<MvCOMMENT>
			|
			|	Looking for g.Waitlist_Email_Continue (0/1)
			|
			</MvCOMMENT>

			<MvASSIGN NAME = "g.Waitlist_Email_Continue" VALUE = "">

			<MvCAPTURE VARIABLE = "l.success">
				<MvDO FILE = "{ g.Store_Template_Path $ l.waitlist_logic_template:filename }" NAME = "l.success" VALUE = "{ Template_Render( l.settings, l.all_settings ) }">
			</MvCAPTURE>

			<MvIF EXPR = "{ NOT ISNULL( g.Waitlist_Email_Continue ) }">
				<MvIF EXPR = "{ g.Waitlist_Email_Continue EQ 1 }">
					<MvASSIGN NAME = "l.continue" VALUE = "1" />
				<MvELSEIF EXPR = "{ g.Waitlist_Email_Continue EQ 0 }">
					<MvASSIGN NAME = "l.continue" VALUE = "0" />
				</MvIF>
			</MvIF>

		</MvIF>
	</MvIF>

	<MvIF EXPR = "{ l.continue LE 0 }">
		<MvFUNCTIONRETURN VALUE = 0 />
	</MvIF>
	<MvFUNCTIONRETURN VALUE = 1 />
</MvFUNCTION>

<MvFUNCTION NAME = "Read_Variant_Options" PARAMETERS = "options var" STANDARDOUTPUTLEVEL = "">
	<MvFOREACH ITERATOR = "l.option" ARRAY = "l.options" INDEX = "l.options_index">
		<MvIF EXPR = "{ l.option:attmpat_id GT 0 }">
			<MvDO FILE = "{ g.Module_Library_DB }"		NAME = "l.success" VALUE = "{ Attribute_Load_ID( l.option:attr_id, l.option:attribute ) }">
			<MvDO FILE = "{ g.Module_Feature_ATT_DB }"	NAME = "l.success" VALUE = "{ AttributeTemplateAttr_Load_ID( l.option:attmpat_id, l.option:product_attribute ) }">
			<MvDO FILE = "{ g.Module_Feature_ATT_DB }"	NAME = "l.success" VALUE = "{ AttributeTemplate_Load_ID( l.option:attribute:attemp_id, l.option:attributetemplate ) }">
			<MvDO FILE = "{ g.Module_Feature_ATT_DB }"	NAME = "l.success" VALUE = "{ AttributeTemplateOption_Load_ID( l.option:option_id, l.option:option ) }">
		<MvELSE>
			<MvDO FILE = "{ g.Module_Library_DB }" NAME = "l.success" VALUE = "{ Attribute_Load_ID( l.option:attr_id, l.option:attribute ) }">
			<MvDO FILE = "{ g.Module_Library_DB }" NAME = "l.success" VALUE = "{ Option_Load_ID( l.option:option_id, l.option:option ) }">
		</MvIF>
	</MvFOREACH>
	<MvFUNCTIONRETURN VALUE = "{ l.options }" />
</MvFUNCTION>

<MvFUNCTION NAME = "Waitlist_Delete_Product" PARAMETERS = "product_id" STANDARDOUTPUTLEVEL = "" ERROROUTPUTLEVEL = "">
	<MvQUERY NAME 	= "Merchant"
			 QUERY 	= "{ 'DELETE FROM ' $ g.Store_Table_Prefix $ 'TGWaitlist WHERE product_id = ?' }"
			 FIELDS = "l.product_id">
	<MvIF EXPR = "{ g.MvQUERY_Error }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'TGWaitlist-DELETE-2000:', g.MvQUERY_Error ) }">
	</MvIF>
	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "Waitlist_Form_Add" PARAMETERS = "product_code, variant_id, email" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.variant_id" VALUE = "{ int( l.variant_id ) }" />

	<MvIF EXPR = "{ NOT [ g.Module_Admin ].Validate_Email( l.email ) }">
		<MvASSIGN NAME = "g.Waitlist_Error" VALUE = "Please enter a valid email.">
		<MvFUNCTIONRETURN VALUE = 0 />
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Product_Load_Code( l.product_code, l.product ) }">
		<MvASSIGN NAME = "g.Waitlist_Error" VALUE = "{ encodeentities( l.product_code ) $ ' does not exist.' }">
		<MvFUNCTIONRETURN VALUE = 0 />
	</MvIF>

	<MvIF EXPR = "{ NOT Waitlist_Add( l.product:id, l.variant_id, l.email ) }">
		<MvFUNCTIONRETURN VALUE = 0 />
	</MvIF>

	<MvASSIGN NAME = "g.Waitlist_Message" VALUE = "{ 'Success! You have been added to the waitlist.' }" />

	<MvFUNCTIONRETURN VALUE = 1 />
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_Waitlist_All_Load_Query" PARAMETERS = "module var" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">
		<MvFUNCTIONRETURN>
	</MvIF>
	<MvASSIGN NAME = "g.Filter"			VALUE = "{ trim( g.Filter ) }">
	<MvASSIGN NAME = "g.Sort"			VALUE = "{ trim( g.Sort ) }">
	<MvASSIGN NAME = "g.Offset"			VALUE = "{ int( g.Offset ) }">
	<MvASSIGN NAME = "g.Count"			VALUE = "{ int( g.Count ) }">
	<MvASSIGN NAME = "l.search_query"	VALUE = "">

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT( l.search_query,'w.*, p.code as product_code, pv.code as variant_code, pv.id as variant_product_id, p.name as product_name, pv.name as variant_name' ) }">

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_FROM( l.search_query, g.Store_Table_Prefix $ 'TGWaitlist', 'w' ) }">

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_LEFT_OUTER_JOIN( l.search_query, 'w', g.Store_Table_Prefix $ 'Products', 'p', 'w.product_id = p.id', '' ) }">

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_LEFT_OUTER_JOIN( l.search_query, 'w', g.Store_Table_Prefix $ 'ProductVariantParts', 'pvp', 'w.variant_id = pvp.variant_id AND w.product_id = pvp.product_id', '' ) }">

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_LEFT_OUTER_JOIN( l.search_query, 'w', g.Store_Table_Prefix $ 'Products', 'pv', 'pvp.part_id = pv.id', '' ) }">

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Filter( l.search_query, g.Filter,'id:w.id,time_added:w.time_added,product_id:w.product_id,variant_id:w.variant_id,email:w.email,cust_id:w.cust_id,product_code:p.code,variant_code:pv.code,product_name:p.name,variant_name:pv.name' ) }">

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_OrderBy_Fields(l.search_query, g.Sort, 'id:w.id,time_added:w.time_added,product_id:w.product_id,variant_id:w.variant_id,email:w.email,cust_id:w.cust_id,product_code:p.code,variant_code:pv.code,product_name:p.name,variant_name:pv.name', 'w.time_added' ) }">

	<MvASSIGN NAME = "l.search_sql" VALUE = "{ [ g.Module_Library_DB].SQL_Query_Build( l.search_query, l.search_fields ) }">

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].SQL_Query_Count( l.search_query, l.total_count ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error(g.Error_Code, g.Error_Message ) }">
	<MvELSEIF EXPR = "{ NOT [ g.Module_Library_Native_DBAPI ].DB_OPENVIEW_Range('Merchant', 'TGWaitlist', l.search_sql, l.search_fields, g.Offset, g.Count) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'TGWaitlist-MOD-2005', 'An error occured.' ) }">
	</MvIF>

	<MvASSIGN NAME = "l.count" VALUE = 0>

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Response_Start() }">
		{
			"data":
				[
					<MvWHILE EXPR = "{ ( NOT TGWaitlist.d.EOF ) AND ( ( g.Count EQ 0 ) OR (l.count LT g.Count ) ) }">
					<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_Start( l.count )}">
					"id": <MvEVAL EXPR = "{ int( TGWaitlist.d.id ) }">,
					"time_added": <MvEVAL EXPR = "{ int( TGWaitlist.d.time_added ) }">,
					"product_id" : <MvEVAL EXPR = "{ int( TGWaitlist.d.product_id ) }">,
					"variant_id" : <MvEVAL EXPR = "{ int( TGWaitlist.d.variant_id ) }">,
					"email" : "<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( TGWaitlist.d.email ) }">",
					"cust_id" : <MvEVAL EXPR = "{ int( TGWaitlist.d.cust_id ) }">,
					"product_code" : "<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( TGWaitlist.d.product_code ) }">",
					"product_name" : "<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( TGWaitlist.d.product_name ) }">",
					"variant_code" : "<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( TGWaitlist.d.variant_code ) }">",
					"variant_name" : "<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( TGWaitlist.d.variant_name ) }">",
					<MvASSIGN NAME = "l.product_id" VALUE = "{ TGWaitlist.d.variant_product_id }">
					<MvASSIGN NAME = "l.variant_id" VALUE = "{ TGWaitlist.d.variant_id }">
					<MvASSIGN NAME = "l.output" VALUE = "NULL" />
					<MvASSIGN NAME = "l.void" VALUE = "{ [ g.Module_Library_DB ].Product_Load_ID_WithRuntimeInventory( l.product_id, l.output ) }">
					<MvASSIGN NAME = "l.void" VALUE = "{ [ g.Module_Feature_INV_RT ].Inventory_Load_Variant( l.output, l.variant_id ) }">
					<MvIF EXPR = "{ l.output:inv_active }">
						"inv_count" : "<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.output:inv_available ) }">"
					<MvELSE>
						"inv_count" : "N/A"
					</MvIF>
					<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_End() }">
					<MvSKIP NAME = "Merchant" VIEW = "TGWaitlist" ROWS = 1>
					</MvWHILE>
				],

			"total_count": <MvEVAL EXPR = "{ int( l.total_count ) }">,
			"start_offset": <MvEVAL EXPR = "{ int( g.Offset ) }">
		}
		<MvCLOSEVIEW NAME = "Merchant" VIEW = "TGWaitlist">
	}
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_Waitlist_Delete" PARAMETERS = "id" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">
		<MvFUNCTIONRETURN>
	</MvIF>
	<MvASSIGN NAME = "l.id" VALUE = "{ int( l.id ) }" />
	<MvIF EXPR = "{ NOT Waitlist_Delete( l.id ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_FieldError( 'time_added', g.MvQUERY_Error ) }">
	</MvIF>
	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Success() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_Waitlist_Trigger_Emails" PARAMETERS = "waitlists" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">
		<MvFUNCTIONRETURN>
	</MvIF>
	<MvFOREACH ITERATOR = "l.waitlist_id" ARRAY = "l.waitlist_array" COUNT = "{ [ g.Module_JSON ].JSON_Array_Integer( l.waitlists, l.waitlist_array ) }">
		<MvASSIGN NAME = "l.success" VALUE = "{ Waitlist_Trigger_Email( l.waitlist_id ) }">
	</MvFOREACH>
	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Success() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_Waitlist_Sent_All_Load_Query" PARAMETERS = "module var" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace">
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }">
		<MvFUNCTIONRETURN>
	</MvIF>
	<MvASSIGN NAME = "g.Filter"			VALUE = "{ trim( g.Filter ) }">
	<MvASSIGN NAME = "g.Sort"			VALUE = "{ trim( g.Sort ) }">
	<MvASSIGN NAME = "g.Offset"			VALUE = "{ int( g.Offset ) }">
	<MvASSIGN NAME = "g.Count"			VALUE = "{ int( g.Count ) }">
	<MvASSIGN NAME = "l.search_query"	VALUE = "">

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT( l.search_query,'ws.*, p.code as product_code, pv.code as variant_code, pv.id as variant_product_id, p.name as product_name, pv.name as variant_name' ) }">

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_FROM( l.search_query, g.Store_Table_Prefix $ 'TGWaitlist_Sent', 'ws' ) }">

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_LEFT_OUTER_JOIN( l.search_query, 'ws', g.Store_Table_Prefix $ 'Products', 'p', 'ws.product_id = p.id', '' ) }">

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_LEFT_OUTER_JOIN( l.search_query, 'ws', g.Store_Table_Prefix $ 'ProductVariantParts', 'pvp', 'ws.variant_id = pvp.variant_id AND ws.product_id = pvp.product_id', '' ) }">

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_LEFT_OUTER_JOIN( l.search_query, 'ws', g.Store_Table_Prefix $ 'Products', 'pv', 'pvp.part_id = pv.id', '' ) }">

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Filter( l.search_query, g.Filter,'id:ws.id,time_added:ws.time_added,time_sent:ws.time_sent,product_id:ws.product_id,variant_id:ws.variant_id,email:ws.email,cust_id:ws.cust_id,product_code:p.code,variant_code:pv.code,product_name:p.name,variant_name:pv.name' ) }">

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_OrderBy_Fields(l.search_query, g.Sort, 'id:ws.id,time_added:ws.time_added,time_sent:ws.time_sent,product_id:ws.product_id,variant_id:ws.variant_id,email:ws.email,cust_id:ws.cust_id,product_code:p.code,variant_code:pv.code,product_name:p.name,variant_name:pv.name', 'ws.time_sent' ) }">

	<MvASSIGN NAME = "l.search_sql" VALUE = "{ [ g.Module_Library_DB].SQL_Query_Build( l.search_query, l.search_fields ) }">

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].SQL_Query_Count( l.search_query, l.total_count ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error(g.Error_Code, g.Error_Message ) }">
	<MvELSEIF EXPR = "{ NOT [ g.Module_Library_Native_DBAPI ].DB_OPENVIEW_Range('Merchant', 'TGWaitlist_Sent', l.search_sql, l.search_fields, g.Offset, g.Count) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'TGWaitlist-MOD-5005', 'An error occured.' ) }">
	</MvIF>

	<MvASSIGN NAME = "l.count" VALUE = 0>

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Response_Start() }">
		{
			"data":
				[
					<MvWHILE EXPR = "{ ( NOT TGWaitlist_Sent.d.EOF ) AND ( ( g.Count EQ 0 ) OR (l.count LT g.Count ) ) }">
					<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_Start( l.count )}">
					"id": <MvEVAL EXPR = "{ int( TGWaitlist_Sent.d.id ) }">,
					"time_added": <MvEVAL EXPR = "{ int( TGWaitlist_Sent.d.time_added ) }">,
					"time_sent": <MvEVAL EXPR = "{ int( TGWaitlist_Sent.d.time_sent ) }">,
					"product_id" : <MvEVAL EXPR = "{ int( TGWaitlist_Sent.d.product_id ) }">,
					"variant_id" : <MvEVAL EXPR = "{ int( TGWaitlist_Sent.d.variant_id ) }">,
					"email" : "<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( TGWaitlist_Sent.d.email ) }">",
					"cust_id" : <MvEVAL EXPR = "{ int( TGWaitlist_Sent.d.cust_id ) }">,
					"product_code" : "<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( TGWaitlist_Sent.d.product_code ) }">",
					"product_name" : "<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( TGWaitlist_Sent.d.product_name ) }">",
					"variant_code" : "<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( TGWaitlist_Sent.d.variant_code ) }">",
					"variant_name" : "<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( TGWaitlist_Sent.d.variant_name ) }">"
					<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_End() }">
					<MvSKIP NAME = "Merchant" VIEW = "TGWaitlist_Sent" ROWS = 1>
					</MvWHILE>
				],

			"total_count": <MvEVAL EXPR = "{ int( l.total_count ) }">,
			"start_offset": <MvEVAL EXPR = "{ int( g.Offset ) }">
		}
		<MvCLOSEVIEW NAME = "Merchant" VIEW = "TGWaitlist_Sent">
	}
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_Waitlist_Sent_Delete" PARAMETERS = "id" STANDARDOUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }"><MvFUNCTIONRETURN></MvIF>
	<MvASSIGN NAME = "l.id" VALUE = "{ int( l.id ) }" />
	<MvIF EXPR = "{ NOT Waitlist_Sent_Delete( l.id ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_FieldError( 'time_sent', g.MvQUERY_Error ) }">
	</MvIF>
	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Success() }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_API_Waitlist_Load_Query" PARAMETERS = "module var" STANDARDOUTPUTLEVEL = "text, compresswhitespace"  ERROROUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }"><MvFUNCTIONRETURN></MvIF>

	<MvASSIGN NAME = "l.filter"						VALUE = "">
	<MvASSIGN NAME = "l.sort"						VALUE = "">
	<MvASSIGN NAME = "l.offset"						VALUE = 0>
	<MvASSIGN NAME = "l.count"						VALUE = 0>

	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Filter(	'o', 'Filter',		l.filter )				OR
					NOT [ g.Module_JSON ].JSON_Input_Text(		'o', 'Sort',		l.sort )				OR
					NOT [ g.Module_JSON ].JSON_Input_Number(	'o', 'Offset',		l.offset,	-1, -1 )	OR
					NOT [ g.Module_JSON ].JSON_Input_Number(	'o', 'Count',		l.count,	-1, -1 ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }">
	</MvIF>

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_SELECT( l.search_query,'w.*, p.code as product_code, pv.code as variant_code, pv.id as variant_product_id, p.name as product_name, pv.name as variant_name' ) }">

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_FROM( l.search_query, g.Store_Table_Prefix $ 'TGWaitlist', 'w' ) }">

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_LEFT_OUTER_JOIN( l.search_query, 'w', g.Store_Table_Prefix $ 'Products', 'p', 'w.product_id = p.id', '' ) }">

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_LEFT_OUTER_JOIN( l.search_query, 'w', g.Store_Table_Prefix $ 'ProductVariantParts', 'pvp', 'w.variant_id = pvp.variant_id AND w.product_id = pvp.product_id', '' ) }">

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_LEFT_OUTER_JOIN( l.search_query, 'w', g.Store_Table_Prefix $ 'Products', 'pv', 'pvp.part_id = pv.id', '' ) }">

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Filter( l.search_query, l.filter,'id:w.id,time_added:w.time_added,product_id:w.product_id,variant_id:w.variant_id,email:w.email,cust_id:w.cust_id,product_code:p.code,variant_code:pv.code,product_name:p.name,variant_name:pv.name' ) }">

	<MvEVAL EXPR = "{ [ g.Module_Library_DB ].SQL_Query_OrderBy_Fields(l.search_query, l.sort, 'id:w.id,time_added:w.time_added,product_id:w.product_id,variant_id:w.variant_id,email:w.email,cust_id:w.cust_id,product_code:p.code,variant_code:pv.code,product_name:p.name,variant_name:pv.name', 'w.time_added' ) }">

	<MvASSIGN NAME = "l.search_sql" VALUE = "{ [ g.Module_Library_DB].SQL_Query_Build( l.search_query, l.search_fields ) }">

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].SQL_Query_Count( l.search_query, l.total_count ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error(g.Error_Code, g.Error_Message ) }">
	<MvELSEIF EXPR = "{ NOT [ g.Module_Library_Native_DBAPI ].DB_OPENVIEW_Range('Merchant', 'TGWaitlist', l.search_sql, l.search_fields, l.offset, l.count) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'TGWAITLIST-JSON-ERROR-0001', 'An error occured.' ) }">
	</MvIF>

	<MvASSIGN NAME = "l.counter" VALUE = 0>

	<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Response_Start() }">
		{
			"data":
				[
					<MvWHILE EXPR = "{ ( NOT TGWaitlist.d.EOF ) AND ( ( l.count EQ 0 ) OR (l.counter LT l.count ) ) }">
					<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_Start( l.counter )}">
					"id": <MvEVAL EXPR = "{ int( TGWaitlist.d.id ) }">,
					"time_added": <MvEVAL EXPR = "{ int( TGWaitlist.d.time_added ) }">,
					"product_id" : <MvEVAL EXPR = "{ int( TGWaitlist.d.product_id ) }">,
					"variant_id" : <MvEVAL EXPR = "{ int( TGWaitlist.d.variant_id ) }">,
					"email" : "<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( TGWaitlist.d.email ) }">",
					"cust_id" : <MvEVAL EXPR = "{ int( TGWaitlist.d.cust_id ) }">,
					"product_code" : "<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( TGWaitlist.d.product_code ) }">",
					"product_name" : "<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( TGWaitlist.d.product_name ) }">",
					"variant_code" : "<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( TGWaitlist.d.variant_code ) }">",
					"variant_name" : "<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( TGWaitlist.d.variant_name ) }">",
					<MvASSIGN NAME = "l.product_id" VALUE = "{ TGWaitlist.d.variant_product_id }">
					<MvASSIGN NAME = "l.variant_id" VALUE = "{ TGWaitlist.d.variant_id }">
					<MvASSIGN NAME = "l.output" VALUE = "NULL" />
					<MvASSIGN NAME = "l.void" VALUE = "{ [ g.Module_Library_DB ].Product_Load_ID_WithRuntimeInventory( l.product_id, l.output ) }">
					<MvASSIGN NAME = "l.void" VALUE = "{ [ g.Module_Feature_INV_RT ].Inventory_Load_Variant( l.output, l.variant_id ) }">
					<MvIF EXPR = "{ l.output:inv_active }">
						"inv_count" : "<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode( l.output:inv_available ) }">"
					<MvELSE>
						"inv_count" : "N/A"
					</MvIF>
					<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_ArrayElement_End() }">
					<MvSKIP NAME = "Merchant" VIEW = "TGWaitlist" ROWS = 1>
					</MvWHILE>
				],

			"total_count": <MvEVAL EXPR = "{ int( l.total_count ) }">,
			"start_offset": <MvEVAL EXPR = "{ int( g.Offset ) }">
		}
		<MvCLOSEVIEW NAME = "Merchant" VIEW = "TGWaitlist">
	}
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_API_Waitlist_Trigger_All" PARAMETERS = "module var" STANDARDOUTPUTLEVEL = ""  ERROROUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }"><MvFUNCTIONRETURN></MvIF>
	<MvIF EXPR = "{ Waitlists_Trigger_All() }"><MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Success() }"></MvIF>
	<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'TGWAITLIST-JSON-ERROR-0002', 'Waitlists Not Triggered.' ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_API_Waitlist_Load_Email" PARAMETERS = "module var" STANDARDOUTPUTLEVEL = ""  ERROROUTPUTLEVEL = "">
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Store_Open() }"><MvFUNCTIONRETURN></MvIF>
	<MvIF EXPR = "{ NOT [ g.Module_JSON ].JSON_Input_Text( 'R', 'Email', l.email ) }"><MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_InputErrors() }"></MvIF>
	<MvIF EXPR = "{ NOT WaitlistXEmail_Load( l.email, l.return ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'TGWAITLIST-JSON-ERROR-0003', 'Error Occurred.' ) }">
	</MvIF>
	<MvEVAL EXPR = "{ JSON_WaitlistXEmail_Load( l.return ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "JSON_WaitlistXEmail_Load" PARAMETERS = "return var" STANDARDOUTPUTLEVEL = "text, html, compresswhitespace"  ERROROUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.counter" VALUE = "0">
	{
		"success": 1,
		"data": {
			"data":
				[
					<MvFOREACH ITERATOR = "l.waitlist" ARRAY = "l.return">
						<MvASSIGN NAME = "l.void" VALUE = "{ [ g.Module_Library_DB ].Product_Load_ID( l.waitlist:product_id, l.waitlist:product ) }">
						<MvIF EXPR = "{ ( l.waitlist:variant_id GT 0 )  AND ( NOT [ g.Module_Library_DB ].ProductVariantList_Load_Variant( l.product_id, l.variant_id, l.waitlist:variants ) ) }">
							<MvASSIGN NAME = "l.void" VALUE = "{ [ g.Module_Library_DB ].Product_Load_ID( l.waitlist:variants[1]:part_id, l.waitlist:variant ) }">
						</MvIF>
						<MvASSIGN NAME = "l.counter" VALUE = "{ l.counter + 1 }">
						<MvIF EXPR = "{ l.counter GT 1 }">,</MvIF>
						{
							"id": <MvEVAL EXPR = "{ int( l.waitlist:id ) }">,
							"time_added": <MvEVAL EXPR = "{ int(  l.waitlist:time_added ) }">,
							"product_id" : <MvEVAL EXPR = "{ int(  l.waitlist:product_id ) }">,
							"variant_id" : <MvEVAL EXPR = "{ int(  l.waitlist:variant_id ) }">,
							"email" : "<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode(  l.waitlist:email ) }">",
							"cust_id" : <MvEVAL EXPR = "{ int(  l.waitlist:cust_id ) }">,
							"product_code" : "<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode(  l.waitlist:product:code ) }">",
							"product_name" : "<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode(  l.waitlist:product:name ) }">",
							"variant_code" : "<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode(  l.waitlist:variant:code ) }">",
							"variant_name" : "<MvEVAL EXPR = "{ [ g.Module_JSON ].JSON_Encode(  l.waitlist:variant:name ) }">"
						}
					</MvFOREACH>
				],
			"total_count": <MvEVAL EXPR = "{ int( l.counter ) }">
		}
	}
</MvFUNCTION>


<MvFUNCTION NAME = "Waitlists_Trigger_All" PARAMETERS = "" STANDARDOUTPUTLEVEL = ""  ERROROUTPUTLEVEL = "">
	<MvOPENVIEW NAME	= "Merchant"
				VIEW 	= "TGWaitlist"
				QUERY 	= "{ 'SELECT * FROM ' $ g.Store_Table_Prefix $ 'TGWaitlist GROUP BY product_id, variant_id' }">

	<MvIF EXPR = "{ g.MvOPENVIEW_Error }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'TGWaitlist-CHECK-1004:', 'An error occured while loading in records.' ) }">
	</MvIF>

	<MvASSIGN NAME = "g.WaitlistCount" VALUE = "0">

	<MvWHILE EXPR = "{ ( NOT TGWaitlist.d.EOF ) AND ( ( g.WaitlistCount EQ 0 ) OR (l.waitlist_num LT ( g.WaitlistCount + 1) ) ) }">
		<MvEVAL EXPR = "{ Waitlist_Read( l.waitlist ) }">
		<MvASSIGN NAME = "l.success" VALUE = "{ miva_array_insert_var( l.all_waitlists, l.waitlist, -1) }">
		<MvASSIGN NAME = "l.waitlist_num"	VALUE = "{ l.waitlist_num + 1 }">
		<MvSKIP NAME = "Merchant" VIEW = "TGWaitlist" ROWS = 1>
	</MvWHILE>

	<MvCLOSEVIEW NAME = "Merchant" VIEW = "TGWaitlist">

	<MvFOREACH ITERATOR = "l.waitlist" ARRAY = "l.all_waitlists">
		<MvASSIGN NAME = "l.success" VALUE = "{ Waitlist_Trigger_EmailsXProduct( l.waitlist:product_id, l.waitlist:variant_id ) }">
	</MvFOREACH>

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "Waitlist_Sent_Read" PARAMETERS = "waitlist var" STANDARDOUTPUTLEVEL = "" ERROROUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.waitlist" MEMBER = "id"				VALUE = "{ TGWaitlist_Sent.d.id }">
	<MvASSIGN NAME = "l.waitlist" MEMBER = "time_added"		VALUE = "{ TGWaitlist_Sent.d.time_added }">
	<MvASSIGN NAME = "l.waitlist" MEMBER = "time_added"		VALUE = "{ TGWaitlist_Sent.d.time_sent }">
	<MvASSIGN NAME = "l.waitlist" MEMBER = "product_id"		VALUE = "{ TGWaitlist_Sent.d.product_id }">
	<MvASSIGN NAME = "l.waitlist" MEMBER = "variant_id"		VALUE = "{ TGWaitlist_Sent.d.variant_id }">
	<MvASSIGN NAME = "l.waitlist" MEMBER = "email"			VALUE = "{ TGWaitlist_Sent.d.email }">
	<MvASSIGN NAME = "l.waitlist" MEMBER = "cust_id" 		VALUE = "{ TGWaitlist_Sent.d.cust_id }">
</MVFUNCTION>

<MvFUNCTION NAME = "Waitlist_Sent_Add_Lowlevel" PARAMETERS = "waitlist var" STANDARDOUTPUTLEVEL = "" ERROROUTPUTLEVEL = "">
	<MvQUERY	NAME = "Merchant"
				QUERY = "{ 'INSERT INTO ' $ g.Store_Table_Prefix $ 'TGWaitlist_Sent
							( id, time_added, time_sent, product_id, variant_id, email, cust_id )
							VALUES
							( ?, ?, ?, ?, ?, ?, ?)' }"
				FIELDS = "l.waitlist:id, l.waitlist:time_added, l.waitlist:time_sent, l.waitlist:product_id, l.waitlist:variant_id, l.waitlist:email, l.waitlist:cust_id">

	<MvIF EXPR = "{ g.MvQUERY_Error }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'TGWaitlist-INSERT-5000:', 'An error occured while inserting a new record.' ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = 1 />
</MvFUNCTION>

<MvFUNCTION NAME = "Waitlist_Sent_Add" PARAMETERS = "waitlist var" STANDARDOUTPUTLEVEL = "" ERROROUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.waitlist:id"			VALUE = "{ int( l.waitlist:id ) }">
	<MvASSIGN NAME = "l.waitlist:time_added"	VALUE = "{ int( l.waitlist:time_added ) }">
	<MvASSIGN NAME = "l.waitlist:time_sent"		VALUE = "{ s.dyn_time_t }">
	<MvASSIGN NAME = "l.waitlist:product_id"	VALUE = "{ int( l.waitlist:product_id ) }">
	<MvASSIGN NAME = "l.waitlist:variant_id"	VALUE = "{ int( l.waitlist:variant_id ) }">
	<MvASSIGN NAME = "l.waitlist:email"			VALUE = "{ trim( l.waitlist:email ) }">
	<MvASSIGN NAME = "l.waitlist:cust_id"		VALUE = "{ int( l.waitlist:cust_id ) }">

	<MvIF EXPR = "{
			NOT l.waitlist:id			OR
			NOT l.waitlist:time_added	OR
			NOT l.waitlist:product_id	OR
			NOT l.waitlist:email
		}">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'TGWaitlist-INSERT-5001:', 'Missing a Required field: id, time_added, time_sent, product_id, email.' ) }">
	</MvIF>

	<MvIF EXPR = "{ NOT [ g.Module_Library_DB ].Product_Load_ID( l.waitlist:product_id, l.loaded_product ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'TGWaitlist-INSERT-5002:', 'Product with ID \'' $ l.waitlist:product_id $ '\' does not exist.' ) }">
	</MvIF>

	<MvIF EXPR = "{ ( l.variant_id GT 0 )  AND ( NOT [ g.Module_Library_DB ].ProductVariantList_Load_Variant( l.product_id, l.variant_id, l.product_variants ) ) }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'TGWaitlist-INSERT-5003:', 'Product Variant could not be found.' ) }">
	</MvIF>

	<MvFUNCTIONRETURN VALUE = "{ Waitlist_Sent_Add_Lowlevel( l.waitlist ) }">
</MvFUNCTION>

<MvFUNCTION NAME = "Waitlist_Sent_Delete" PARAMETERS = "waitlist_id" STANDARDOUTPUTLEVEL = "" ERROROUTPUTLEVEL = "">
	<MvQUERY NAME 	= "Merchant"
			 QUERY 	= "{ 'DELETE FROM ' $ g.Store_Table_Prefix $ 'TGWaitlist_Sent WHERE id = ?' }"
			 FIELDS = "l.waitlist_id">
	<MvIF EXPR = "{ g.MvQUERY_Error }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'TGWaitlist-DELETE-5002:', g.MvQUERY_Error ) }">
	</MvIF>
	
	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "Waitlist_Sent_Delete_Product" PARAMETERS = "product_id" STANDARDOUTPUTLEVEL = "" ERROROUTPUTLEVEL = "">
	<MvQUERY NAME 	= "Merchant"
			 QUERY 	= "{ 'DELETE FROM ' $ g.Store_Table_Prefix $ 'TGWaitlist_Sent WHERE product_id = ?' }"
			 FIELDS = "l.product_id">
	<MvIF EXPR = "{ g.MvQUERY_Error }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'TGWaitlist-DELETE-5001:', g.MvQUERY_Error ) }">
	</MvIF>
	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "Waitlist_API" PARAMETERS = "" STANDARDOUTPUTLEVEL = "">
	<MvCOMMENT>
	|
	|	Available Functions ( g.WaitlistFunction )
	|		Waitlist_Add
	|			g.Product_Code, g.Variant_ID, g.Email		
	|
	</MvCOMMENT>
	<MvASSIGN NAME = "g.WaitlistFunction" VALUE = "{ [ g.Module_JSON ].JSON_Decode( g.WaitlistFunction ) }">
	<MvASSIGN NAME = "g.Email" VALUE = "{ [ g.Module_JSON ].JSON_Decode( g.Email ) }">
	<MvASSIGN NAME = "g.Product_Code" VALUE = "{ [ g.Module_JSON ].JSON_Decode( g.Product_Code ) }">
	<MvASSIGN NAME = "g.Variant_ID" VALUE = "{ [ g.Module_JSON ].JSON_Decode( g.Variant_ID ) }">

	<MvIF EXPR = "{ ISNULL g.WaitlistFunction }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'WaitlistFunction', 'Missing Function' ) }">
	</MvIF>
	<MvIF EXPR = "{ g.WaitlistFunction EQ 'Waitlist_Add' }">
		<MvIF EXPR = "{ ISNULL g.Product_Code }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'Waitlist_Add', 'Missing Product_Code' ) }">
		</MvIF>
		<MvIF EXPR = "{ ISNULL g.Email }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'Waitlist_Add', 'Missing Email' ) }">
		</MvIF>
		<MvIF EXPR = "{ NOT Waitlist_Form_Add( g.Product_Code, g.Variant_ID, g.Email ) }">
			<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Error( 'Waitlist_Add', g.Waitlist_Error ) }">
		</MvIF>
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_JSON ].JSON_Response_Success() }">
	</MvIF>
</MvFUNCTION>

<MvFUNCTION NAME = "Waitlist_API_URL" PARAMETERS = "module var, return var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.return" VALUE = "{ g.json_url $ 'Module_Code=' $ encodeattribute( l.module:code ) $ '&Store_Code=' $ encodeattribute( g.Store:code ) $ '&Function=Module&Module_Function=Waitlist_API' }">
	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "CurrentWaitlistCount" PARAMETERS = "product_id, variant_id, return var" STANDARDOUTPUTLEVEL = ""  ERROROUTPUTLEVEL = "">
	<MvIF EXPR = "{ ISNULL l.variant_id }">
		<MvASSIGN NAME = "l.variant_id" VALUE = "0">
	</MvIF>

	<MvOPENVIEW NAME	= "Merchant"
				VIEW 	= "TGWaitlistCount"
				QUERY 	= "{ 'SELECT COUNT(id) as total_count FROM ' $ g.Store_Table_Prefix $ 'TGWaitlist WHERE product_id = ? AND variant_id = ? ' }"
				FIELDS	= "l.product_id, l.variant_id">

	<MvIF EXPR = "{ g.MvOPENVIEW_Error }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'TGWaitlist-CHECK-1001:', 'An error occured while checking a record.' ) }">
	</MvIF>

	<MvASSIGN NAME = "l.return" VALUE = "{ TGWaitlistCount.d.total_count }">

	<MvCLOSEVIEW NAME = "Merchant" VIEW = "TGWaitlistCount">
	
	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "WaitlistXCustomer_Load" PARAMETERS = "cust_id, return var" STANDARDOUTPUTLEVEL = ""   ERROROUTPUTLEVEL = "">
	<MvIF EXPR = "{ ISNULL l.cust_id }">
		<MvASSIGN NAME = "l.return" VALUE = "0">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>
	<MvIF EXPR = "{ l.cust_id LE 0 }">
		<MvASSIGN NAME = "l.return" VALUE = "0">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvOPENVIEW NAME	= "Merchant"
				VIEW 	= "TGWaitlist"
				QUERY 	= "{ 'SELECT * FROM ' $ g.Store_Table_Prefix $ 'TGWaitlist WHERE cust_id = ?' }"
				FIELDS	= "l.cust_id">

	<MvIF EXPR = "{ g.MvOPENVIEW_Error }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'TGWaitlist-CHECK-1005:', 'An error occured while loading in records.' ) }">
	</MvIF>

	<MvASSIGN NAME = "g.WaitlistCount" VALUE = "0">

	<MvWHILE EXPR = "{ ( NOT TGWaitlist.d.EOF ) AND ( ( g.WaitlistCount EQ 0 ) OR (l.waitlist_num LT ( g.WaitlistCount + 1) ) ) }">
		<MvEVAL EXPR = "{ Waitlist_Read( l.waitlist ) }">
		<MvASSIGN NAME = "l.success" VALUE = "{ Waitlist_Product_Check( l.waitlist:product_id, l.waitlist:variant_id, l.waitlist) }">
		<MvASSIGN NAME = "l.success" VALUE = "{ miva_array_insert_var( l.all_waitlists, l.waitlist, -1) }">
		<MvASSIGN NAME = "l.waitlist_num"	VALUE = "{ l.waitlist_num + 1 }">
		<MvSKIP NAME = "Merchant" VIEW = "TGWaitlist" ROWS = 1>
	</MvWHILE>
	<MvCLOSEVIEW NAME = "Merchant" VIEW = "TGWaitlist">

	<MvASSIGN NAME = "l.return" VALUE = "{ l.all_waitlists }">

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "WaitlistXEmail_Load" PARAMETERS = "email, return var" STANDARDOUTPUTLEVEL = ""  ERROROUTPUTLEVEL = "">
	<MvIF EXPR = "{ ISNULL l.email }">
		<MvASSIGN NAME = "l.return" VALUE = "0">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>

	<MvOPENVIEW NAME	= "Merchant"
				VIEW 	= "TGWaitlist"
				QUERY 	= "{ 'SELECT * FROM ' $ g.Store_Table_Prefix $ 'TGWaitlist WHERE email = ?' }"
				FIELDS	= "l.email">

	<MvIF EXPR = "{ g.MvOPENVIEW_Error }">
		<MvFUNCTIONRETURN VALUE = "{ [ g.Module_Library_Utilities ].Error( 'TGWaitlist-CHECK-1005:', 'An error occured while loading in records.' ) }">
	</MvIF>

	<MvASSIGN NAME = "g.WaitlistCount" VALUE = "0">

	<MvWHILE EXPR = "{ ( NOT TGWaitlist.d.EOF ) AND ( ( g.WaitlistCount EQ 0 ) OR (l.waitlist_num LT ( g.WaitlistCount + 1) ) ) }">
		<MvEVAL EXPR = "{ Waitlist_Read( l.waitlist ) }">
		<MvASSIGN NAME = "l.success" VALUE = "{ Waitlist_Product_Check( l.waitlist:product_id, l.waitlist:variant_id, l.waitlist) }">
		<MvASSIGN NAME = "l.success" VALUE = "{ miva_array_insert_var( l.all_waitlists, l.waitlist, -1) }">
		<MvASSIGN NAME = "l.waitlist_num"	VALUE = "{ l.waitlist_num + 1 }">
		<MvSKIP NAME = "Merchant" VIEW = "TGWaitlist" ROWS = 1>
	</MvWHILE>
	<MvCLOSEVIEW NAME = "Merchant" VIEW = "TGWaitlist">

	<MvASSIGN NAME = "l.return" VALUE = "{ l.all_waitlists }">

	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "Parse_Function_Parameters" PARAMETERS = "string, function_name var, parameters var, parameter_count var" STANDARDOUTPUTLEVEL = "">	
	<MvASSIGN NAME = "l.parameter_count" 	VALUE = 0>
	<MvASSIGN NAME = "l.loop_counter" 		VALUE = 0>
	<MvASSIGN NAME = "l.string" 			VALUE = "{ trim( l.string ) }">
	<MvASSIGN NAME = "l.starting_pos" 		VALUE = "{ indexof( '(', l.string, 1 ) + 1 }">
	<MvASSIGN NAME = "l.function_name" 		VALUE = "{ tolower( substring_var( l.string, 1, l.starting_pos - 2 ) ) }">
	
	<MvIF EXPR = "{ l.starting_pos EQ 1 }">
		<MvFUNCTIONRETURN VALUE = "{ Parameter_Error( l.string, 'Expected \'(\' to start the function call' ) }">
	</MvIF>
	
	<MvIF EXPR = "{ ISNULL l.function_name }">
		<MvFUNCTIONRETURN VALUE = "{ Parameter_Error( l.string, 'Missing function name' ) }">
	</MvIF>
	
	<MvIF EXPR = "{ substring_var( l.string, len_var( l.string ), 1 ) NE ')' }">
		<MvFUNCTIONRETURN VALUE = "{ Parameter_Error( l.string, 'Expected \')\' to end the function call' ) }">
	</MvIF>

	<MvWHILE EXPR = "{ 1 }">
		<MvASSIGN NAME = "l.quote_pos" 		VALUE = "{ indexof( '\'', l.string, l.starting_pos ) }">
		<MvASSIGN NAME = "l.end_quote_pos" 	VALUE = "{ indexof( '\'', l.string, l.quote_pos + 1 ) }">
		<MvASSIGN NAME = "l.comma_pos" 		VALUE = "{ indexof( ',', l.string, l.starting_pos ) }">

		<MvIF EXPR = "{ l.quote_pos AND NOT l.end_quote_pos }">
			<MvFUNCTIONRETURN VALUE = "{ Parameter_Error( l.string, 'Missing single quote' ) }">
		</MvIF>
		
		<MvWHILE EXPR = "{ ( l.comma_pos LT l.end_quote_pos ) AND ( l.comma_pos GT l.quote_pos ) }"> <MvCOMMENT> comma in a quoted string </MvCOMMENT>
			<MvASSIGN NAME = "l.comma_pos" VALUE = "{ indexof( ',', l.string, l.comma_pos + 1 ) }">
		</MvWHILE>
		
		<MvIF EXPR = "{ l.comma_pos EQ 0 }"> <MvCOMMENT> on the last parameter or we only have 1 parameter </MvCOMMENT>
			<MvASSIGN NAME = "l.start" 			VALUE = "{ l.starting_pos }">
			<MvASSIGN NAME = "l.end" 			VALUE = "{ len_var( l.string ) - l.starting_pos }">
			<MvASSIGN NAME = "l.starting_pos" 	VALUE = "{ len_var( l.string ) }">
			<MvASSIGN NAME = "l.quote_pos" 		VALUE = 0>
		<MvELSE> <MvCOMMENT> if there are more commas to come, grab from the start to the comma</MvCOMMENT>
			<MvASSIGN NAME = "l.start" 			VALUE = "{ l.starting_pos }">
			<MvASSIGN NAME = "l.end" 			VALUE = "{ l.comma_pos - l.starting_pos }">
			<MvASSIGN NAME = "l.starting_pos" 	VALUE = "{ l.comma_pos + 1 }">
		</MvIF>

		<MvASSIGN NAME = "l.param" VALUE = "{ trim( substring_var( l.string, l.start, l.end ) ) }">
		
		<MvIF EXPR = "{ ISNULL l.param }">
			<MvIF EXPR = "{ l.comma_pos EQ 0 AND l.parameter_count EQ 0 }">
				<MvFUNCTIONRETURN VALUE = 1>
			</MvIF>
			
			<MvFUNCTIONRETURN VALUE = "{ Parameter_Error( l.string, 'Parameter number ' $ ( ++l.parameter_count ) $ ' cannot be empty' ) }">
		</MvIF>
		
		<MvASSIGN NAME = "l.parameters" INDEX = "{ ++l.parameter_count }" VALUE = "{ l.param }">
		
		<MvIF EXPR = "{ l.quote_pos EQ 0 AND l.comma_pos EQ 0 }">
			<MvWHILESTOP>
		</MvIF>

		<MvIF EXPR = "{ l.loop_counter GT 1000 }">
			<MvFUNCTIONRETURN VALUE = "{ Parameter_Error( l.string, 'Error parsing parameters' ) }">
		</MvIF>
		
		<MvASSIGN NAME = "l.loop_counter" VALUE = "{ l.loop_counter + 1 }">
	</MvWHILE>
	
	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>

<MvFUNCTION NAME = "Parameter_Error" PARAMETERS = "param, message" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.error_count"														VALUE = "{ miva_array_elements( g.Session:wailist ) }">
	<MvASSIGN NAME = "g.Session:wailist" INDEX = "{ l.error_count + 1 }" MEMBER = "param"	VALUE = "{ l.param }">
	<MvASSIGN NAME = "g.Session:wailist" INDEX = "{ l.error_count + 1 }" MEMBER = "message"	VALUE = "{ l.message }">
	
	<MvFUNCTIONRETURN VALUE = 0>
</MvFUNCTION>

<MvFUNCTION NAME = "Is_Variable" PARAMETERS = "variable var" STANDARDOUTPUTLEVEL = "">
	<MvASSIGN NAME = "l.valid_chars" 		VALUE = "_.: ">
	<MvASSIGN NAME = "l.square_bracket_pos" VALUE = 0>
	<MvASSIGN NAME = "l.bracket_count" 		VALUE = 0>

	<MvFOR INDEX = "l.pos" COUNT = "{ len_var( l.variable ) }">
		<MvASSIGN NAME = "l.char" VALUE = "{ substring_var( l.variable, l.pos, 1 ) }">

		<MvIF EXPR = "{ l.pos EQ 1 }">
			<MvIF EXPR = "{ ( NOT isalpha( l.char ) ) AND
							( l.char NE '_' ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>
			
			<MvFORCONTINUE>
		</MvIF>
		
		<MvIF EXPR = "{ l.char EQ '[' }">
			<MvASSIGN NAME = "l.bracket_count" 				VALUE = "{ l.bracket_count + 1 }">
			<MvASSIGN NAME = "l.opening_square_bracket_pos" VALUE = "{ indexof( '[', l.variable, l.pos + 1 ) }">
			<MvASSIGN NAME = "l.closing_square_bracket_pos" VALUE = "{ indexof( ']', l.variable, l.pos ) }">
			
			<MvIF EXPR = "{ ( l.opening_square_bracket_pos GT 0 ) AND
							( l.opening_square_bracket_pos LT l.closing_square_bracket_pos ) }">
				<MvASSIGN NAME = "l.pos" VALUE = "{ l.opening_square_bracket_pos - 1 }">
			<MvELSEIF EXPR = "{ l.closing_square_bracket_pos GT 0 }">
				<MvASSIGN NAME = "l.pos" VALUE = "{ l.closing_square_bracket_pos - 1 }">
			</MvIF>
		<MvELSEIF EXPR = "{ l.char EQ ']' }">
			<MvASSIGN NAME = "l.bracket_count" 				VALUE = "{ l.bracket_count - 1 }">
			<MvASSIGN NAME = "l.opening_square_bracket_pos" VALUE = "{ indexof( '[', l.variable, l.pos ) }">
			<MvASSIGN NAME = "l.closing_square_bracket_pos" VALUE = "{ indexof( ']', l.variable, l.pos + 1 ) }">
			
			<MvIF EXPR = "{ ( l.opening_square_bracket_pos GT 0 ) AND
							( l.opening_square_bracket_pos LT l.closing_square_bracket_pos ) }">
				<MvASSIGN NAME = "l.pos" VALUE = "{ l.opening_square_bracket_pos - 1 }">
			<MvELSEIF EXPR = "{ l.closing_square_bracket_pos GT 0 }">
				<MvASSIGN NAME = "l.pos" VALUE = "{ l.closing_square_bracket_pos - 1 }">
			</MvIF>
		<MvELSE>
			<MvIF EXPR = "{ ( NOT isdigit( l.char ) ) AND
							( NOT isalpha( l.char ) ) AND
							( NOT ( l.char IN l.valid_chars ) ) }">
				<MvFUNCTIONRETURN VALUE = 0>
			</MvIF>
		</MvIF>
	</MvFOR>
	
	<MvIF EXPR = "{ l.bracket_count NE 0 }">
		<MvFUNCTIONRETURN VALUE = 0>
	</MvIF>
	
	<MvFUNCTIONRETURN VALUE = 1>
</MvFUNCTION>
